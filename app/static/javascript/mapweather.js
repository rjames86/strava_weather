// Generated by CoffeeScript 1.10.0
(function() {
  var calculateTimeFromStart, createMap, createWeatherPoints, getWeatherForPoint, makeInfoWindow, savedPoints, searchRWGS;

  savedPoints = {};

  calculateTimeFromStart = function(point) {
    var speed, startTime, time;
    startTime = 1482352464;
    speed = 24 * 1000;
    time = (point.d / speed) * 60 * 60;
    return startTime + time;
  };

  getWeatherForPoint = function(point, callback) {
    if (savedPoints[point.y + "," + point.x]) {
      return callback(savedPoints[point.y + "," + point.x]);
    }
    return $.ajax({
      async: false,
      url: "/weather/" + point.y + "/" + point.x + "/" + (calculateTimeFromStart(point)),
      success: function(res) {
        savedPoints[point.y + "," + point.x] = res;
        return callback(res);
      },
      error: function() {
        return callback({});
      }
    });
  };

  makeInfoWindow = function(info) {
    var key, keyMap, listItem, ref, toRet, value;
    listItem = function(i, j) {
      return "<dt>" + i + "</dt><dd>" + j + "</dd>";
    };
    keyMap = {
      apparentTemperature: function(value) {
        return listItem("Feels Like", value);
      },
      humidity: function(value) {
        return listItem("Humidity", value);
      },
      precipProbability: function(value) {
        return listItem("Precipitation Probability", value);
      },
      summary: function(value) {
        return listItem("Summary", value);
      },
      temperature: function(value) {
        return listItem("Temperature", value);
      },
      time: function(value) {
        return listItem("Estimated Arrival Time", new Date(value * 1000));
      },
      windBearing: function(value) {
        return listItem("Wind Bearing", value);
      },
      windSpeed: function(value) {
        return listItem("Wind Speed", value);
      }
    };
    toRet = "<dl class=\"dl-horizontal\">";
    ref = info.data;
    for (key in ref) {
      value = ref[key];
      if (!(keyMap[key] == null)) {
        toRet += keyMap[key](value);
      }
    }
    toRet += "</dl>";
    return toRet;
  };

  createWeatherPoints = function(map, points) {
    var d, i, index, infowindow, k, l, latLng, len, len1, m, marker, point, ref, ref1, results, weatherPoints;
    weatherPoints = [];
    (ref = points[points.length - 1], d = ref.d);
    for (i = k = 0, ref1 = d; k <= ref1; i = k += 60000) {
      for (l = 0, len = points.length; l < len; l++) {
        point = points[l];
        if (point.d > i) {
          weatherPoints.push(point);
          break;
        }
      }
    }
    results = [];
    for (index = m = 0, len1 = weatherPoints.length; m < len1; index = ++m) {
      point = weatherPoints[index];
      infowindow = new google.maps.InfoWindow();
      latLng = {
        lat: point.y,
        lng: point.x
      };
      marker = new google.maps.Marker({
        position: latLng,
        map: map,
        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=" + index + "|FF0000|000000"
      });
      results.push((function(point, marker) {
        return google.maps.event.addListener(marker, 'click', function() {
          return getWeatherForPoint(point, function(info) {
            infowindow.setContent(makeInfoWindow(info));
            return infowindow.open(map, marker);
          });
        });
      })(point, marker));
    }
    return results;
  };

  createMap = function(res) {
    var coordinates, map, point, routePath, track_points;
    track_points = res.data.track_points;
    track_points = _.filter(track_points, function(tp) {
      return tp.x != null;
    });
    coordinates = (function() {
      var k, len, results;
      results = [];
      for (k = 0, len = track_points.length; k < len; k++) {
        point = track_points[k];
        results.push({
          lat: point.y,
          lng: point.x
        });
      }
      return results;
    })();
    map = new google.maps.Map(document.getElementById('map'), {
      zoom: 8,
      center: coordinates[0],
      mapTypeId: 'terrain'
    });
    routePath = new google.maps.Polyline({
      path: coordinates,
      geodesic: true,
      strokeColor: '#FF0000',
      strokeOpacity: 1.0,
      strokeWeight: 5
    });
    routePath.setMap(map);
    return createWeatherPoints(map, track_points);
  };

  searchRWGS = function(url) {
    var route, urlMatch, urlSearch;
    urlSearch = /(trips|routes)\/(\d+)/;
    urlMatch = urlSearch.exec(url);
    if (urlMatch.length === 3) {
      route = urlMatch[1] === 'trips' ? 'trip' : 'route';
      return $.ajax({
        url: "/rwgs/" + route + "/" + urlMatch[2],
        success: createMap
      });
    }
  };

  window.initMap = function() {
    return $.ajax({
      url: '/rwgs/route/15903786',
      success: createMap
    });
  };

  $(function() {
    return $('#rwgs-search').submit(function(event) {
      event.preventDefault();
      return searchRWGS(document.getElementById("rwgsSearch").value);
    });
  });

}).call(this);
